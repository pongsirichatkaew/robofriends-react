{"version":3,"sources":["reportWebVitals.js","components/Header.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","redux/robots/robots.type.js","container/App.js","redux/robots/robots.action.js","redux/robots/robots.reducer.js","redux/searchField/searchfield.type.js","redux/searchField/searchfield.reducer.js","redux/root-reducer.js","redux/store.js","serviceWorkerRegistration.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Header","nextProps","nextState","React","Component","Card","id","name","email","className","alt","src","CardList","robots","console","log","cardComponent","map","robot","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","children","style","overflowY","border","height","ErrorBoundary","props","state","hasError","error","info","this","setState","FETCH_PRODUCTS_PENDING","FETCH_PRODUCTS_SUCCESS","FETCH_PRODUCTS_ERROR","App","useState","setSearchField","dispatch","useDispatch","useSelector","users","useEffect","fetch","res","json","data","payload","catch","filteredRobots","filter","toLowerCase","includes","length","event","target","value","robotInitialState","pending","robotsReducer","action","CHANGE_SEARCH_FIELD","initialState","searchFieldReducer","rootReducer","combineReducers","robotReducer","middlewares","logger","thunk","store","createStore","applyMiddleware","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.25b1a25a.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\n// import CounterButton from './CounterButton';\r\n// const Header = () => {\r\n//   console.log('Header rendered');\r\n//   return <h1>RoboFrineds</h1>;\r\n// };\r\n\r\nclass Header extends React.Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return true;\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>RoboFrineds</h1>\r\n        {/*<CounterButton color={'red'} />*/}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n  return (\r\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  console.log('render Card');\r\n  // if (true) {\r\n  //   throw new Error('Nooooooo');\r\n  // }\r\n  const cardComponent = robots.map((robot) => (\r\n    <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email} />\r\n  ));\r\n  return <div>{cardComponent}</div>;\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchField, searchChange }) => {\r\n  console.log('Searhbox render');\r\n  return (\r\n    <input\r\n      className='pa3 ba b--green bg-lightest-blue'\r\n      type='search'\r\n      placeholder='search robots'\r\n      onChange={searchChange}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = ({ children }) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: 'scroll',\r\n        border: '5px solid black',\r\n        height: '800px',\r\n      }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React from 'react';\r\n\r\n// Good for production not works in development\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Oooops. That is not good</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","export const FETCH_PRODUCTS_PENDING = 'FETCH_PRODUCTS_PENDING';\r\nexport const FETCH_PRODUCTS_SUCCESS = 'FETCH_PRODUCTS_SUCCESS';\r\nexport const FETCH_PRODUCTS_ERROR = 'FETCH_PRODUCTS_ERROR';\r\n","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport Header from '../components/Header';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { requestRobots } from '../redux/robots/robots.action';\r\nfunction App() {\r\n  const [searchField, setSearchField] = useState('');\r\n  const dispatch = useDispatch();\r\n  const robots = useSelector((state) => state.robots.users);\r\n\r\n  useEffect(() => {\r\n    dispatch(requestRobots());\r\n  }, [dispatch]);\r\n\r\n  const onSearchChange = (event) => {\r\n    setSearchField(event.target.value);\r\n  };\r\n\r\n  const filteredRobots = robots.filter((robot) => {\r\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n  });\r\n  return !robots.length ? (\r\n    <h1 className='tc'>Loading</h1>\r\n  ) : (\r\n    <div className='tc'>\r\n      <Header />\r\n      <SearchBox searchChange={onSearchChange} />\r\n      {/*<button onClick={() => setCount(count + 1)}>Click Me!</button>*/}\r\n      <Scroll>\r\n        <ErrorBoundary>\r\n          <CardList robots={filteredRobots} />\r\n        </ErrorBoundary>\r\n      </Scroll>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import {\r\n  FETCH_PRODUCTS_ERROR,\r\n  FETCH_PRODUCTS_SUCCESS,\r\n  FETCH_PRODUCTS_PENDING,\r\n} from './robots.type';\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: FETCH_PRODUCTS_PENDING });\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then((res) => res.json())\r\n    .then((data) => dispatch({ type: FETCH_PRODUCTS_SUCCESS, payload: data }))\r\n    .catch((error) => dispatch({ type: FETCH_PRODUCTS_ERROR, payload: error }));\r\n};\r\n","import {\r\n  FETCH_PRODUCTS_ERROR,\r\n  FETCH_PRODUCTS_SUCCESS,\r\n  FETCH_PRODUCTS_PENDING,\r\n} from './robots.type';\r\nconst robotInitialState = {\r\n  pending: false,\r\n  users: [],\r\n  error: null,\r\n};\r\nconst robotsReducer = (state = robotInitialState, action) => {\r\n  switch (action.type) {\r\n    case FETCH_PRODUCTS_PENDING:\r\n      return {\r\n        ...state,\r\n        pending: true,\r\n      };\r\n    case FETCH_PRODUCTS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        pending: false,\r\n        users: action.payload,\r\n      };\r\n    case FETCH_PRODUCTS_ERROR:\r\n      return {\r\n        ...state,\r\n        pending: false,\r\n        error: action.error,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default robotsReducer;\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n","import { CHANGE_SEARCH_FIELD } from './searchfield.type';\r\nconst initialState = {\r\n  searchField: '',\r\n};\r\n\r\nconst searchFieldReducer = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return { ...state, searchField: payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default searchFieldReducer;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport robotReducer from './robots/robots.reducer';\r\nimport searchFieldReducer from './searchField/searchfield.reducer';\r\nconst rootReducer = combineReducers({\r\n  robots: robotReducer,\r\n  searchField: searchFieldReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport logger from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './root-reducer';\r\n\r\nconst middlewares = [logger, thunk];\r\n// const middlewares = [ thunk];\r\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './container/App';\nimport 'tachyons';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}